const express = require("express")
const gravatar = require("gravatar")
const bcrypt = require("bcryptjs")
const jwt = require("jsonwebtoken")
const router = express.Router()
const config = require("config")
const { check, validationResult } = require("express-validator/check")
const User = require("../../models/User")

// @route POST api/users
// @desc register user
// @access Public
router.post(
  "/",
  [
    check("name", "Name is required").not().isEmail(),
    check("email", "Please include a valid email").isEmail(),
    check(
      "password",
      " Please enter a password with 6 or more characters",
    ).isLength({ min: 6 }),
  ],
  async (req, res) => {
    console.log(req.body)
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() }) //bad request
    }

    const { name, email, password } = req.body

    try {
      //see if user exists
      let user = await User.findOne({ email }) //I have tested with the email because it's unique
      if (user) {
        res.status(400).json({ errors: [{ msg: "User already exists" }] })
      }
      //Get users gravatar
      const avatar = gravatar.url(email, {
        s: "200", //I don't know what is s,r and d, I found this in the documentation of gravatar module
        r: "pg",
        d: "mm",
      })

      user = new User({
        name,
        email,
        avatar,
        password,
      })

      //Encrypt the password

      const salt = await bcrypt.genSalt(10) //10 is the recomendation in the documentation
      user.password = await bcrypt.hash(password, salt) //create the hash and put it in the user.password

      //Saving the user in the database
      await user.save()

      //return JWT
      const payload = {
        user: {
          id: user.id, //default id generated by mongodb afer saving the user
        },
      }

      jwt.sign(
        payload,
        config.get("jwtSecret"),
        { expiresIn: 360000 },
        (err, token) => {
          if (err) {
            throw err
          }
          res.json({ token })
          console.log(token)
        },
      )

      //res.send("User registred")
    } catch (err) {
      console.log(err.message)
    }
  },
)

module.exports = router
