const express = require("express")
const router = express.Router()
const jwt = require("jsonwebtoken")
const config = require("config")
const bcrypt = require("bcryptjs")
const { check, validationResult } = require("express-validator/check")
const auth = require("../../middleware/auth")
const User = require("../../models/User")

// @route GET api/auth
// @desc Test route
// @access Public
router.get("/", auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password")
    res.json(user)
  } catch (err) {
    console.log(err.message)
    res.status(500).send("server error")
  }
})

//module.exports = router

// @route POST api/auth
// @desc authenticate user and get Token
// @access Public
router.post(
  "/",
  [
    check("email", "Please include a valid email").isEmail(),
    check("password", " password is required").exists(),
  ],
  async (req, res) => {
    console.log(req.body)
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() }) //bad request
    }

    const { name, email, password } = req.body

    try {
      //see if user exists
      let user = await User.findOne({ email }) //I have tested with the email because it's unique
      if (!user) {
        return res
          .status(400)
          .json({ errors: [{ msg: "Invalid authentification" }] }) // testing if the user does not exixts, so the auth is not valid
      }

      //compare the email and the password of the current user for the authentification

      const isMatch = await bcrypt.compare(password, user.password)
      if (!isMatch) {
        return res
          .status(400)
          .json({ errors: [{ msg: "Invalid authentification" }] })
      }

      //return JWT
      const payload = {
        user: {
          id: user.id, //default id generated by mongodb afer saving the user
        },
      }

      jwt.sign(
        payload,
        config.get("jwtSecret"),
        { expiresIn: 360000 },
        (err, token) => {
          if (err) {
            throw err
          }
          res.json({ token })
          console.log(token)
        },
      )

      //res.send("User registred")
    } catch (err) {
      console.log(err.message)
    }
  },
)

module.exports = router
